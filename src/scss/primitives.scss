@import '/src/scss/modularScale.scss';

@mixin stack($space: modular-scale(0)) {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;

    & > * {
        margin-block: 0;
    }

    & > * + * {
        margin-block-start: $space;
    }
}

@mixin box($padding: modular-scale(0)) {
    padding: $padding;
    outline: 0.125rem solid transparent;
    outline-offset: -0.125rem;

    &  * {
        color: inherit;
    }
}

@mixin center() {
    display: flex;
    flex-direction: column;
    align-items: center;
}

@mixin cluster($gap: modular-scale(0), $vertical: center, $horizontal: flex-start) {
    display: flex;
    flex-wrap: wrap;
    gap: $gap;
    align-items: $vertical;
    justify-content: $horizontal;
}

@mixin with-sidebar($sidebar-width: modular-scale(10), $gap: modular-scale(0), $reversed: false) {
    display: flex;
    flex-wrap: wrap;
    gap: $gap;

    @if $reversed {
        & > :last-child{
            flex-basis: $sidebar-width;
            flex-grow: 1;
        }
        & > :first-child {
            flex-basis: 0;
            flex-grow: 999;
            min-inline-size: 60%;
        }
    } @else {
        & > :first-child{
            flex-basis: $sidebar-width;
            flex-grow: 1;
        }
        & > :last-child {
            flex-basis: 0;
            flex-grow: 999;
            min-inline-size: 60%;
        }
    }
}

@mixin switcher($threshold: modular-scale(10), $max-elements: 5, $gap: modular-scale(0)) {
    .switcher {
        display: flex;
        flex-wrap: wrap;
        gap: $gap;
    }
    .swticher > * {
        flex-grow: 1;
        flex-basis: calc(($threshold - 100%) * 999);
    }
    .switcher > :nth-last-child(n+#{$max-elements + 1}),
    .switcher > :nth-last-child(n+#{$max-elements + 1}) ~ * {
        flex-basis: 100%;
    }
}

@mixin cover($gap: modular-scale(0), $min-height: 100vh) {
    display: flex;
    flex-direction: column;
    min-block-size: $min-height;

    & > * {
        margin-block: $gap;
    }
    & > header:first-child {
        margin-block-start: 0;
    }
    & > footer:last-child {
        margin-block-end: 0;
    }
    & > .main {
        margin-block: auto;
    }
}

@mixin grid($min-element-width: modular-scale(5), $gap: modular-scale(0)) {
    display: grid;
    grid-gap: $gap;
    
    @supports (width: min($min-element-width, 100%)) {
        grid-template-columns: repeat(auto-fit, minmax(min($min-element-width, 100%), 1fr));
    }
}

@mixin frame($numerator: 1, $denominator: 1) {
    aspect-ratio: #{$numerator} / #{$denominator};
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;

    & > img,
    & > video,
    & > picture {
        inline-size: 100%;
        block-size: 100%;
        object-fit: cover;
    }
}

@mixin imposter() {
    position: fixed;
    inset-block-start: 50%;
    inset-inline-start: 50%;
    transform: translate(-50%, -50%);
}

@mixin with-icon($gap: modular-scale(0), $size-coefficient: 1, $auto-height: true) {
    display: inline-flex;
    @if $size-coefficient > 1 {
        align-items: center;
    } @else {
        align-items: baseline;
    }
    
    img, svg {
        width: calc(0.75em * $size-coefficient);
        width: calc(1cap * $size-coefficient);
        @if $auto-height {
            height: calc(0.75em * $size-coefficient);
            height: calc(1cap * $size-coefficient);
        }
        margin-inline-end: $gap;
    }
}